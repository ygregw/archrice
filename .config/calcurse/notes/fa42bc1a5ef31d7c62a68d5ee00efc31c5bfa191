* *types* namespace:

    Defines a number of **integral types** (here, "integral" is an adjective
    that corresponds to the noun "integer").

    For example: *types::global_dof_index* stores global indice of DOFs, which
    can be from a few thousand to a few million. Behind the scene,
    *types::global_dof_index* is simply *unsigned int*, which allows to store
    numbers between 0 and slightly more than 4 billion (on most systems, where
    integers are 32-bit).

    Why not just use *unsigned int*? See discussion in the link bellow.
    - Link: [A note on types](https://dealii.org/developer/doxygen/deal.II/step_3.html#Anoteontypes)

* *FEValues* class:

    Given one instance of three objects respectively from *FiniteElement*,
    *Quadrature*, and (implicitly) *Mapping* classes, provide the user with
    information about values and gradients of shape functions at quadrature
    points on a real cell.
    **NB**: Actually, there is a fourth (third if the Mapping object is the default
    one, i.e., bilinear Q1 mapping) one, the *UpdateFlags* object to restrict
    computation each time a cell is visited.
    Recomputation of the flagged quantities is done by:

    `FE_Q<dim> fe;
    QGauss<dim> quadrature_formula(fe.degree+1);
    UpdateFlags update_flags = update_values | update_gradients | update_quadrature_points | update_JxW_values;

    FEValues<dim> fe_values(fe, quadrature_formula, update_flags);
    ...(when revisit a new cell)
    fe_values.reinit(cell)`

    - Link: [Interplay of UpdateFlags, Mapping and FiniteElement in FEValues](https://dealii.org/developer/doxygen/deal.II/group__UpdateFlags.html)
	> In addition, once you pass a set of flags for what you want, the
	> functions filling the data fields of FEValues are able to distinguish
	> between values that have to be recomputed on each cell (for example
	> mapped gradients) and quantities that do not change from cell to cell
	> (for example the values of shape functions of the usual Qp finite
	> elements at the same quadrature points on different cells; this
	> property does not hold for the shape functions of Raviart-Thomas
	> elements, however, which must be rotated with the local cell). This
	> allows further optimization of the computations underlying assembly.
	**NB**: This property does not hold for the shape functions of
	Raviart-Thomas elements, however, which must be rotated with the local
	cell. RT elements are not mapped using the usual affine maps, which do
	not preserve angles, instead, they use the Piola transformations.
    - Link: [How Mapping, FiniteElement and FEValues work together](https://dealii.org/developer/doxygen/deal.II/group__FE__vs__Mapping__vs__FEValues.html)

* Tips and tricks
	1. How to set different b.c.'s other than homogeneous Dirichlet illstrated for the simplest Poisson problem?
	    - Link: [Extension towards different b.c.](https://dealii.org/developer/doxygen/deal.II/step_3.html#Results)
